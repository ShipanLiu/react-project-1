name: Deploy React App with Docker via Cloudflare Tunnel

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js (for testing)
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run TypeScript type check
      run: npx tsc --noEmit
      
    - name: Run linting
      run: npm run lint
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/react-project-1:latest
          ${{ secrets.DOCKER_USERNAME }}/react-project-1:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Install and setup Cloudflare tunnel
      run: |
        # Install cloudflared
        wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
        sudo dpkg -i cloudflared-linux-amd64.deb
        
        # Setup SSH directory and key with proper permissions
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        
        # Write SSH private key and fix permissions
        echo "${{ secrets.SSH_PRIVATE_KRY }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        
        # Fix potential key format issues
        # Remove any Windows line endings and ensure proper format
        sed -i 's/\r$//' ~/.ssh/id_ed25519
        
        # Verify key format
        echo "Key format check:"
        head -1 ~/.ssh/id_ed25519
        tail -1 ~/.ssh/id_ed25519
        
        # Create SSH config for Cloudflare tunnel
        cat > ~/.ssh/config << 'EOF'
        Host cf-tunnel
            HostName ${{ secrets.CF_SSH_HOSTNAME }}
            User ${{ secrets.SERVER_USER }}
            IdentityFile ~/.ssh/id_ed25519
            ProxyCommand cloudflared access ssh --hostname ${{ secrets.CF_SSH_HOSTNAME }}
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
            IdentitiesOnly yes
            LogLevel ERROR
        EOF
        
        chmod 600 ~/.ssh/config
        
    - name: Test SSH connection
      run: |
        echo "Testing SSH connection..."
        # Test with verbose output for debugging
        ssh -v cf-tunnel "echo 'SSH connection successful!' && whoami && pwd && echo 'Docker check:' && docker --version" 2>&1 || {
          echo "SSH connection failed. Trying alternative approach..."
          # Try direct connection with cloudflared
          cloudflared access ssh --hostname ${{ secrets.CF_SSH_HOSTNAME }} --id ${{ secrets.SERVER_USER }}@${{ secrets.CF_SSH_HOSTNAME }} -- echo "Direct cloudflared test"
        }
        
    - name: Deploy to server
      run: |
        # Create deployment script
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "🚀 Starting deployment..."
        echo "Current user: $(whoami)"
        echo "Current directory: $(pwd)"
        echo "Docker version: $(docker --version)"
        
        # Create app directory in the proper location
        mkdir -p ~/projects/production/react_project_1/frontend
        cd ~/projects/production/react_project_1/frontend
        echo "Working in: $(pwd)"
        
        # Create docker-compose.yml file
        cat > docker-compose.yml << 'COMPOSE_EOF'
        version: '3.8'
        services:
          react-app:
            image: ${{ secrets.DOCKER_USERNAME }}/react-project-1:latest
            container_name: react-project-1
            restart: unless-stopped
            ports:
              - "3001:80"
            networks:
              - react-project-1
            healthcheck:
              test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
              interval: 30s
              timeout: 10s
              retries: 3
        
        networks:
          react-project-1:
            external: true
        COMPOSE_EOF
        
        echo "Docker compose file created:"
        cat docker-compose.yml
        
        # Pull and deploy
        echo "📦 Pulling latest image..."
        docker pull ${{ secrets.DOCKER_USERNAME }}/react-project-1:latest
        
                 echo "🔄 Stopping old container..."
         # Stop and remove existing container using docker compose
         docker compose down || echo "No existing services to stop"
         
         echo "🚀 Starting new container with docker compose..."
         docker compose up -d
         
         echo "Container started successfully!"
         echo "Waiting for container to be ready..."
         sleep 10
        
        echo "🧹 Cleanup old images..."
        docker image prune -f
        
        echo "✅ Deployment complete!"
        
        # Verify deployment
        echo "🔍 Verifying deployment..."
        sleep 15
        
        echo "Container status:"
        docker ps --filter "name=react-project-1" || echo "No container found"
        
        if docker ps | grep -q react-project-1; then
          echo "✅ Container is running"
          
          # Check container logs
          echo "Container logs (last 10 lines):"
          docker logs react-project-1 --tail 10
          
          # Check if the service responds
          if wget --spider --quiet http://localhost:3001/health 2>/dev/null; then
            echo "✅ Health check passed"
            echo "🎉 Deployment successful!"
          else
            echo "⚠️  Health check failed, checking container status..."
            docker logs react-project-1 --tail 20
          fi
        else
          echo "❌ Container failed to start"
          echo "Docker logs:"
          docker logs react-project-1 --tail 20 2>/dev/null || echo "No logs available"
          exit 1
        fi
        EOF
        
        # Execute deployment with error handling
        echo "Executing deployment script..."
        ssh cf-tunnel 'bash -s' < deploy.sh || {
          echo "Deployment failed, trying to get more information..."
          ssh cf-tunnel 'docker ps -a && docker logs react-project-1 --tail 50 2>/dev/null || echo "No container logs"'
          exit 1
        } 