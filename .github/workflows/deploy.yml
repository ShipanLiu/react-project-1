name: Deploy React App with Docker via Cloudflare Tunnel

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js (for testing)
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run TypeScript type check
      run: npx tsc --noEmit
      
    - name: Run linting
      run: npm run lint
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/react-project-1:latest
          ${{ secrets.DOCKER_USERNAME }}/react-project-1:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Install and setup Cloudflare tunnel
      run: |
        # Install cloudflared
        wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
        sudo dpkg -i cloudflared-linux-amd64.deb
        
        # Setup SSH key
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        
        # Create SSH config for Cloudflare tunnel
        cat > ~/.ssh/config << 'EOF'
        Host cf-tunnel
            HostName ${{ secrets.CF_SSH_HOSTNAME }}
            User ${{ secrets.SERVER_USER }}
            IdentityFile ~/.ssh/id_ed25519
            ProxyCommand cloudflared access ssh --hostname ${{ secrets.CF_SSH_HOSTNAME }}
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
        EOF
        
    - name: Test SSH connection
      run: |
        # Test the connection first
        ssh cf-tunnel "echo 'SSH connection successful!' && whoami && pwd"
        
    - name: Deploy to server
      run: |
        # Create deployment script
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "üöÄ Starting deployment..."
        
        # Create app directory
        mkdir -p ~/react-project-1
        cd ~/react-project-1
        
        # Create docker-compose file
        cat > docker-compose.yml << 'COMPOSE_EOF'
        version: '3.8'
        services:
          react-app:
            image: ${{ secrets.DOCKER_USERNAME }}/react-project-1:latest
            container_name: react-project-1
            restart: unless-stopped
            ports:
              - "3000:80"
            healthcheck:
              test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
              interval: 30s
              timeout: 10s
              retries: 3
        COMPOSE_EOF
        
        # Pull and deploy
        echo "üì¶ Pulling latest image..."
        docker pull ${{ secrets.DOCKER_USERNAME }}/react-project-1:latest
        
        echo "üîÑ Restarting container..."
        docker-compose down || true
        docker-compose up -d
        
        echo "üßπ Cleanup old images..."
        docker image prune -f
        
        echo "‚úÖ Deployment complete!"
        
        # Verify deployment
        echo "üîç Verifying deployment..."
        sleep 15
        
        if docker ps | grep -q react-project-1; then
          echo "‚úÖ Container is running"
          docker ps --filter "name=react-project-1"
          
          # Check if the service responds
          if wget --spider --quiet http://localhost:3000/health 2>/dev/null; then
            echo "‚úÖ Health check passed"
            echo "üéâ Deployment successful!"
          else
            echo "‚ö†Ô∏è  Health check failed, but container is running"
            echo "Container logs:"
            docker logs react-project-1 --tail 20
          fi
        else
          echo "‚ùå Container failed to start"
          echo "Docker logs:"
          docker logs react-project-1 --tail 20 || echo "No logs available"
          exit 1
        fi
        EOF
        
        # Execute deployment
        ssh cf-tunnel 'bash -s' < deploy.sh 