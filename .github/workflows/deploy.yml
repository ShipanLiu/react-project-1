name: Deploy React App with Docker to Ubuntu Server

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js (for testing)
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run TypeScript type check
      run: npx tsc --noEmit
      
    - name: Run linting
      run: npm run lint
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/react-project-1:latest
          ${{ secrets.DOCKER_USERNAME }}/react-project-1:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Deploy to Ubuntu Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT }}
        script: |
          # Create application directory
          mkdir -p /home/${{ secrets.SERVER_USER }}/react-project-1
          cd /home/${{ secrets.SERVER_USER }}/react-project-1
          
          # Create docker-compose.yml for production
          cat > docker-compose.prod.yml << 'EOF'
          version: '3.8'
          services:
            react-app:
              image: ${{ secrets.DOCKER_USERNAME }}/react-project-1:latest
              container_name: react-project-1
              restart: unless-stopped
              ports:
                - "80:80"
              networks:
                - react-network
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost/health"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 40s
          networks:
            react-network:
              driver: bridge
          EOF
          
          # Pull latest image
          docker pull ${{ secrets.DOCKER_USERNAME }}/react-project-1:latest
          
          # Stop and remove old container
          docker-compose -f docker-compose.prod.yml down
          
          # Start new container
          docker-compose -f docker-compose.prod.yml up -d
          
          # Clean up old images
          docker image prune -f
          
          echo "Deployment completed successfully!"
          
    - name: Verify deployment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT }}
        script: |
          # Wait for container to be ready
          sleep 10
          
          # Check if container is running
          if docker ps | grep -q "react-project-1"; then
            echo "✅ Container is running"
            
            # Check health endpoint
            if curl -f http://localhost/health; then
              echo "✅ Health check passed"
              echo "🚀 Deployment successful!"
            else
              echo "❌ Health check failed"
              exit 1
            fi
          else
            echo "❌ Container is not running"
            docker logs react-project-1
            exit 1
          fi 